import{_ as s,o,c as a,d as e,e as t}from"./app.17d27ced.js";const _=JSON.parse('{"title":"Note","description":"","frontmatter":{},"headers":[],"relativePath":"public/sources/multimodel/sets/beautifulLandscape/Readme.md"}'),r={name:"public/sources/multimodel/sets/beautifulLandscape/Readme.md"},i=e("h1",{id:"note",tabindex:"-1"},[t("Note "),e("a",{class:"header-anchor",href:"#note","aria-hidden":"true"},"#")],-1),n=e("p",null,[t("These upscaled output results have not only been converted from png to jpg to save space ("),e("a",{href:"https://png2jpg.com/",target:"_blank",rel:"noreferrer"},"https://png2jpg.com/"),t(") but additionally they have been compressed with mozjpg ("),e("a",{href:"https://mozjpeg.com/",target:"_blank",rel:"noreferrer"},"https://mozjpeg.com/"),t("). I started converting, and then later saving, the results to jpg because of file size limitations on the imgsli service. Uploading a set with multiple images started to fail. Of course it also saves storage space. But because this set got so big, the mozjpg compression was used additionally. I think this is fine if comparing results with each other that went through the exact same compression process. But this is more to keep in mind if you want to compare one of these output files when comparing to your own upscaling result with a different upscaler, to compare apples with apples (in this example compressed jpg to compressed jpg, not compressed jpg with a png upscale output)")],-1),p=[i,n];function c(l,d,h,m,u,g){return o(),a("div",null,p)}const b=s(r,[["render",c]]);export{_ as __pageData,b as default};
